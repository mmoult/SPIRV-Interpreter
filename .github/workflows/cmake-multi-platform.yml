# Â© SPIRV-Interpreter @ https://github.com/mmoult/SPIRV-Interpreter
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
name: CMake on multiple platforms

on:
  push:
    # "actions" is the testing branch
    branches: [ "master", "actions" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this
      # to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: Release
        config:
#        - name: "Windows Latest MSVC"
#          artifact: "Windows-MSVC"
#          os: windows-latest
#          cc: "cl"
#          cxx: "cl"
#          environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
#        - name: "Windows Latest MinGW"
#          artifact: "Windows-MinGW"
#          os: windows-latest
#          cc: "gcc"
#          cxx: "g++"
        - name: "Ubuntu Latest GCC"
          artifact: "Linux"
          os: ubuntu-latest
          cc: "gcc"
          cxx: "g++"
#        - name: "macOS Latest Clang"
#          artifact: "macOS"
#          os: macos-latest
#          cc: "clang"
#          cxx: "clang++"

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be
      # used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Checkout submodules
      shell: bash
      working-directory: ${{ github.workspace }}
      run: git submodule update --init --recursive

    - name: Configure
      # Configure CMake in a 'build' subdirectory.
      run: >
        cmake
        -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ github.workspace }}
        -G Ninja
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TESTING

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows
      # generator (Visual Studio) is a multi-config generator.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Tests Unit
      working-directory: ${{ steps.strings.outputs.build-output-dir }}/test
      run: tests

    - name: Tests Integration
      working-directory: ${{ github.workspace }}/test
      run: example-runner.py
