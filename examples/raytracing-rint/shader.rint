#version 460 core
#extension GL_EXT_ray_tracing : require

layout(location = 0) in vec3 sphereCenter;
layout(location = 1) in float sphereRadius;
layout(location = 2) out uint intersection;

hitAttributeEXT vec3 normal;

struct IntersectionProperties
{
    vec3 normal;
    float hit_t;
    bool intersected;
};

IntersectionProperties raySphereIntersection(vec3 sphere_center, float sphere_radius, vec3 ray_origin, vec3 ray_direction)
{
    // Assume the ray will miss
    IntersectionProperties result;
    result.normal = vec3(0.0);
    result.hit_t = 10000000.0;
    result.intersected = false;

    // Solves the intersection by using an analytic solution.
    // Let (origin - sphere_center) be x.
    // We are solving [(dir * dir) * t^2 + (2 * dir . x) * t + (x . x) - radius^2 = 0]
    vec3 dist_o_c = ray_origin - sphere_center; // Distance between the ray's origin and the sphere's center
    float a = dot(ray_direction, ray_direction);
    float b = 2.0 * dot(ray_direction, dist_o_c);
    float c = dot(dist_o_c, dist_o_c) - (sphere_radius * sphere_radius);

    float discriminant = (b * b) - (4.0 * a * c); // An intersection exist if we can take the square root of this value

    if (discriminant >= 0)
    {
        result.intersected = true;
        result.hit_t = (-b - sqrt(discriminant)) / (2.0 * a); // The entry point
        result.normal = normalize((ray_origin + ray_direction * result.hit_t) - sphere_center);
    }

    return result;
}

void main() 
{
    vec3 ray_origin = gl_ObjectRayOriginEXT;
    vec3 ray_direction = gl_ObjectRayDirectionEXT;

    const IntersectionProperties result = raySphereIntersection (
        sphereCenter, 
        sphereRadius, 
        ray_origin, 
        ray_direction
    );

    if (result.intersected && result.hit_t >= 0)
    {
        // Intersected sphere in direction of ray
        vec3 entryPoint = ray_origin + ray_direction * result.hit_t;
        normal = result.normal;
    }

    // Note: parameters: hitT, hitKind
    intersection = uint(reportIntersectionEXT(result.hit_t, 0));
}
